//apply plugin: 'com.android.application'
apply plugin:'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
//        applicationId "com.qpidnetwork.livemodule"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        //testInstrumentationRunner "android.support.test.runner.Android  JUnitRunner"
        multiDexEnabled true

        renderscriptTargetApi 15
        renderscriptSupportModeEnabled true

//        ndk{
//            moduleName "liveshowLib"
//            abiFilters "armeabi" , "armeabi-v7a" , "x86"
//        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/libs']
        }
    }
//    externalNativeBuild {
//        ndkBuild {
//            path file("src/main/jni/Android.mk")
//        }
//        /*cmake {
//            path "CMakeLists.txt"
//        }*/
//    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
//    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile fileTree(include: ['*.jar'],
            excludes: [
                    'bolts-tasks-1.4.0.jar'
                    ,'picasso-2.5.2.jar'
                    ,'haha-2.0.3.jar'
                    ,'leakcanary-watcher-1.5.4.jar'
                    ,'okhttp-3.9.1.jar'
                    ,'okio-1.13.0.jar'
            ], dir: 'libs')
    provided files('libs/bolts-tasks-1.4.0.jar')
    provided files('libs/picasso-2.5.2.jar')
    provided files('libs/okhttp-3.9.1.jar')
    provided files('libs/okio-1.13.0.jar')

    compile(name: 'filedownloader-1.6.8', ext: 'aar')
    //    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    //        exclude group: 'com.android.support', module: 'support-annotations'
    //    })
    //    testCompile 'junit:junit:4.12'
    //Fresco引用aar
    compile(name: 'animated-base-1.3.0', ext: 'aar')
    compile(name: 'animated-base-support-1.3.0', ext: 'aar')
    compile(name: 'animated-webp-1.3.0', ext: 'aar')
    compile(name: 'animated-gif-1.3.0', ext: 'aar')
    compile(name: 'drawee-1.3.0', ext: 'aar')
    compile(name: 'fbcore-1.3.0', ext: 'aar')
    compile(name: 'fresco-1.3.0', ext: 'aar')
    compile(name: 'imagepipeline-1.3.0', ext: 'aar')
    compile(name: 'imagepipeline-base-1.3.0', ext: 'aar')
    compile(name: 'webpsupport-1.3.0', ext: 'aar')
    //cardview
    compile(name: 'cardview-v7-25.3.1', ext: 'aar')
    //QN公共模块（本地引用）
    compile project(':QNBridgeModule:bridgeService')
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.3.1'
    //内存泄漏及UI线程卡顿检测
//    debugCompile(name: 'blockcanary-android-1.5.0', ext: 'aar')
//    compile(name: 'blockcanary-analyzer-1.5.0', ext: 'aar')
//    releaseCompile(name: 'blockcanary-no-op-1.5.0', ext: 'aar')
//    debugCompile(name: 'leakcanary-android-1.5.4', ext: 'aar')
//    releaseCompile(name: 'leakcanary-android-no-op-1.5.4', ext: 'aar')
//    compile(name: 'leakcanary-analyzer-1.5.4', ext: 'aar')
    compile project(':Google-play-services_lib')
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

task ndkBuild(type: Exec) {
    workingDir file('src/main')
    commandLine getNdkBuildCmd()
}

task cleanNative(type: Exec) {
    workingDir file('src/main/jni')
    commandLine getNdkBuildCmd(), 'clean'
}

clean.dependsOn cleanNative

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")
    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    ndkbuild += ".cmd"
    return ndkbuild
}
